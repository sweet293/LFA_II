package Lab6;
import Lab3.AgainLab3.Token;
import Lab6.TokenType;

import java.util.List;
import java.util.ArrayList;
import java.util.Stack;

import static Lab6.Lexer.lexer;
public class Parser {
    private static List<Token> tokens; //list to store tokens generated by the lexer
    private int currentTokenIndex; //index to keep track of the current token being processed

    //initialize the parser with the list of tokens
    public Parser(List<Lab3.AgainLab3.Token> tokens) {
        this.tokens = tokens;
        this.currentTokenIndex = 0;
    }

    public void parse() {
        try {
            // Parse the program on Adder
            parseProgram();
        } catch (Lab3.AgainLab3.ParseException e) {
            System.out.println("Parsing error: " + e.getMessage()); //print error message if parsing fails
        }
    }
    private void parseProgram() throws Lab3.AgainLab3.ParseException {
        // Iterate through the tokens and parse each statement in the program
        while (currentTokenIndex < tokens.size()) {
            parseStatement(); // Call the method to parse each statement
        }
    }

    private void parseStatement() throws Lab3.AgainLab3.ParseException {
        //here are handled different types of statements based on the language grammar
        Lab3.AgainLab3.Token token = consume(); // Consume the current token
        System.out.println("Parsed statement: " + token.match); // Print the parsed statement
    }
    // Method to consume the current token and move to the next token
    private Lab3.AgainLab3.Token consume() throws Lab3.AgainLab3.ParseException {
        if (currentTokenIndex < tokens.size()) {
            return tokens.get(currentTokenIndex++); // Return the current token and move to the next token
        } else {
            throw new Lab3.AgainLab3.ParseException("Unexpected end of input.");// Throw exception if end of input is reached
        }
    }

    // Method to check if the current token matches a specified token type
    private boolean match(Lab6.TokenType type) {
        return currentTokenIndex < tokens.size() && tokens.get(currentTokenIndex).type == type;
    }

    public static void main(String[] args) {
        //call the lexer function to generate tokens
        lexer();

        //create a parser object with the generated tokens and initiate parsing
        Lab3.AgainLab3.Parser parser = new Lab3.AgainLab3.Parser(tokens);
        parser.parse();
    }
}

class ParseException extends Exception {
    public ParseException(String message) {
        super(message);
    }

}
